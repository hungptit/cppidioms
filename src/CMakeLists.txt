PROJECT(unittests)
CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

find_program(CCACHE_PROGRAM ccache)
if (CCACHE_PROGRAM)
    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM})
endif()

set(CMAKE_INSTALL_PREFIX "$ENV{HOME}")
set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../")
set(EXTERNAL_DIR "${ROOT_DIR}/3p")
set(SRC_DIR "${ROOT_DIR}/src")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Read the git tags to determine the project version
include(GetGitVersion)
get_git_version(GIT_VERSION)

# Tell the user what versions we are using
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" VERSION ${GIT_VERSION})
message("-- Version: ${VERSION}")

# The version of the libraries
set(GENERIC_LIB_VERSION ${VERSION})
string(SUBSTRING ${VERSION} 0 1 GENERIC_LIB_SOVERSION)

include(CheckCXXCompilerFlag)
include(AddCXXCompilerFlag)
include(CXXFeatureCheck)

# SET(CMAKE_CXX_COMPILER clang++)
# SET(CMAKE_CXX_COMPILER g++-9)
# add_cxx_compiler_flag(-stdlib=libc++)

# set(CMAKE_BUILD_TYPE Debug)

set (CMAKE_BUILD_TYPE Release)
add_cxx_compiler_flag(-O3)
add_cxx_compiler_flag(-march=native)

# Enable other flags
add_cxx_compiler_flag(-std=c++14)
add_cxx_compiler_flag(-Wall)
add_cxx_compiler_flag(-pedantic)
# add_cxx_compiler_flag(-pedantic-errors)
add_cxx_compiler_flag(-fstrict-aliasing)
# add_cxx_compiler_flag(-fsanitize=address)

if (HAVE_CXX_FLAG_FSTRICT_ALIASING)
  add_cxx_compiler_flag(-Wstrict-aliasing)
endif()

if (HAVE_WTHREAD_SAFETY)
  add_definitions(-DHAVE_WTHREAD_SAFETY)
  cxx_feature_check(THREAD_SAFETY_ATTRIBUTES)
endif()

# These flags are used to optimize the binary size.
add_cxx_compiler_flag(-fno-exceptions)
add_cxx_compiler_flag(--fno-rtti)

# Customized flags
add_cxx_compiler_flag(-DFMT_HEADER_ONLY)
add_cxx_compiler_flag(-DCEREAL_RAPIDJSON_HAS_CXX11_RVALUE_REFS)

# Build using static libraries to reduce dependency.
add_cxx_compiler_flag(-flto)
add_cxx_compiler_flag(-static)
add_cxx_compiler_flag(-fsanitize=address)

ENABLE_TESTING()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Include folders
include_directories ("${EXTERNAL_DIR}/include")
include_directories ("${EXTERNAL_DIR}/include/eigen3")
include_directories ("${SRC_DIR}")

# Unittests
set(SRC_FILES custom_deleter shared_ptr std_vector_back singleton enable_if matrix generate
    move_semantics numeric_limits function_arg_lifetime misuse_smart_ptr accumulate avoid_boost_optional
    use_clara enum_values eigen_ops eigen_matrix )
foreach (src_file ${SRC_FILES})
  ADD_EXECUTABLE(${src_file} ${src_file}.cpp)
  TARGET_LINK_LIBRARIES(${src_file})
  ADD_TEST(${src_file} ./${src_file})
endforeach (src_file)
INSTALL_PROGRAMS("/bin/" FILES ${SRC_FILES})
